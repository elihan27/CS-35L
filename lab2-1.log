grep "<td>.*</td>" hw.html > hw03.html
grep 
sed “s/<td></td>/g”

$ sed -n "2~2 p" hw03.html


grep "<td>.+</td>" hw.html > hw03.html 
sed -n "2~2 p" hw03.


sed 's/<td><\/td>/g' hw03.html
sed ' /<td><\/td>/d' hw03.html

sed '/^$/d'



grep "<td>.*</td>" hw.html > hw03.html //print all lines that begin with <td> and end with </td>"
sed ' /<td><\/td>/d' hw03.html > hw03.html //delete all lines that don't have anything in between <td> and </td>
sed -n "2~2 p" hw04.html >hw05.html //print evenlined characters
		sed '/<td>/d' hw05.html   //doesn't work for some reason
sed 's/<td>//g' hw05.html | sed 's/<\/td>//g' > hw06.html
cut -c 5- hw06.html | tr [A-Z] [a-z] > hw07.html
sed 's/<u>//g' hw07.html | sed 's/<\/u>//g' > hw08.html
sed "s/\`/\'/g" hw08.html > hw09.html
tr -s ' ,?' '[\n*]'< hw09.html > hw10.html
grep "[pk'mnwlhaeiou]*" hw10.html > hw11.html
sort hw11.html | uniq

tr[]


<\/u>

cut -c 5- hw06.html | tr [A-Z] [a-z] 


hw07.html







sed 's/<\/td>//g' hw05.html  

sed ' /<\/td>/d' hw03.html

cut -d '.' -f 2 hw06.html
cut -d ' ' -f 2 hw06.html //leaves me with a giant, giant realm of blank space
cut -d ' ' -f 1 hw06.html //same
cut -d 'H' -f 2 hw06.html
cut -d '\' -f 2 hw06.html

cut -d ' ' -f 2 hw06.html

cut -d '<td>' -f 2 hw06.html
sed 's/`/'/g' hw08.html
tr [`] ['] hw08.html
sed 's/`/'/g' hw08.html
sed 's/'`'/'/g' hw08.html
tr [\\\`] ['] hw08.html
sed 's/\\\`/'/g' hw08.html
sed 's/`/'/g' hw08.html
 ~]$ sed 's/\`/'/g' hw08.html
> ^C
[elizabeh@lnxsrv07 ~]$ echo '`'
`
[elizabeh@lnxsrv07 ~]$ sed 's/'`'/'/g' hw08.html
> ^C
[elizabeh@lnxsrv07 ~]$ sed 's/\\\`/'/g' hw08.html
> ^C
[elizabeh@lnxsrv07 ~]$ sed "s/\`/'/g' hw08.html
> ^C
[elizabeh@lnxsrv07 ~]$ "s/'/a/g" hw08.html
-bash: s/'/a/g: No such file or directory
[elizabeh@lnxsrv07 ~]$ sed 's/\`/\'/g' hw08.html
> ^C
[elizabeh@lnxsrv07 ~]$ sed "s/\`/\'/g" hw08.html




grep "<td>.*</td>" hw.html | sed ' /<td><\/td>/d' | sed -n "2~2 p" | sed 's/<td>//g'| sed 's/<\/td>//g' | cut -c 5- | tr [A-Z] [a-z] | sed 's/<u>//g' | sed 's/<\/u>//g' | sed "s/\`/\'/g" | tr -s ' ,?' '[\n*]' | grep "[pk'mnwlhaeiou]*" |sort | uniq


emacs buildwords
[elizabeh@lnxsrv07 ~]$ chmod +rwx buildwords



tr -cs '[pk'mnwlhaeiou]' '[\n*]' < assign2.html| sort -u | comm -23 - hwords

'[\n*]' | sort -u | comm -23 - words

tr -cs 'A-Za-z' '[\n*]' < assign2.html | sort -u | comm -23 - words


tr -cs '[pk'mnwlhaeiou]' '[\n*]' < assign2.html| sort -u | comm -23 - hwords





grep "<td>.*</td>" hw.html > hw03.html //print all lines that begin with <td> and end with </td>"
sed ' /<td><\/td>/d' hw03.html > hw03.html //delete all lines that don't have anything in between <td> and </td>
sed -n "2~2 p" hw04.html >hw05.html //print evenlined characters
		sed '/<td>/d' hw05.html   //doesn't work for some reason
sed 's/<td>//g' hw05.html | sed 's/<\/td>//g' > hw06.html
cut -c 5- hw06.html | tr [A-Z] [a-z] > hw07.html
sed 's/<u>//g' hw07.html | sed 's/<\/u>//g' > hw08.html
sed "s/\`/\'/g" hw08.html > hw09.html
tr -s ' ,?' '[\n*]'< hw09.html > hw10.html
grep "[pk'mnwlhaeiou]*" hw10.html > hw11.html
sort hw11.html | uniq




tr -cs "A-Za-z'" '[\n*]' < assign2.html | tr [A-Z] [a-z] | sort -u | comm -23 - hwords | wc -l
415 


tr [A-Z] [a-z] < assign2.html | tr -cs "pk\'mnwlhaeiou" '[\n*]' | sort -u | comm -23 - Hwords | wc -l

tr -cs "pk\'mnwlhaeiou" '[\n*]' < assign2.html | sort -u | comm -23 - Hwords | wc -l

tr -cs "pk\'mnwlhaeiou" '[\n*]' < assign2.html| tr [A-Z] [a-z] | sort -u | comm -23 - Hwords | wc -l
2--

tr -cs 'A-Za-z' '[\n*]' < assign2.html | tr [A-Z] [a-z] | sort -u | comm -23 - words | wc -l 
39

tr -cs 'A-Za-z' '[\n*]' < assign2.html | sort -u | comm -23 - words | wc -l 
81


tr -cs "A-Za-z'" '[\n*]' < assign2.html | tr [A-Z] [a-z] | sort -u | comm -23 - hwords > hewords
tr -cs 'A-Za-z' '[\n*]' < assign2.html | tr [A-Z] [a-z] | sort -u | comm -23 - words > ehwords

comm -12 ehwords hwords
halau
lau
wiki

comm -12 hewords words


a
able
about
above
abovementioned
accent
address
after
afterwards
against
all
also
an
and
any
apostrophe
are
argument
arguments
as
ascii
assign
assignment
assume
assumption
attempt
automate
awk
b
bar
be
before
being
body
br
briefly
bug
bugs
but
by
c
can
capitalized
carriage
case
cased
cases
cat
change
chap
characters
check
checked
checker
checkers
checking
checks
columns
com
comm
command
commands
commas
contain
containing
contains
content
contents
convenience
copy
copying
copyright
count
create
crude
cs
d
describe
described
detail
dict
dictionary
did
differs
directories
directory
disk
do
doesn't
don't
down
dtd
duplicate
duplicates
each
en
english
entries
equiv
equivalent
equivalents
error
examine
example
examples
exp
export
extract
fetch
file
files
find
finds
first
fix
following
foo
for
formatted
from
generally
give
given
gnu
grave
gt
h
hand
handle
happened
hard
has
hawaiian
head
hint
homework
hosts
how
however
hr
id
if
ignore
immediately
implementation
improperly
in
input
into
introductory
is
it
its
itself
just
k
keep
l
lab
laboratory
language
last
later
lc
leading
less
letters
lexicographically
li
like
line
links
list
ln
locale
log
lots
lower
lt
m
mail
many
may
mentioned
merely
meta
misspelled
modify
more
multiple
n
name
named
names
naming
need
no
non
not
note
notebook
nothing
number
o
obtain
occurrence
of
on
one
only
or
ordinary
org
orthography
other
others
output
outputs
p
page
particular
paul
people
per
performed
please
portable
position
pre
prefer
prepared
previous
problem
problems
project
public
pubs
putting
r
rather
read
readable
reading
record
recursively
regular
reject
remaining
removing
repair
replace
replaces
report
represent
reproduce
result
resulting
results
returns
right
rules
run
runnable
running
samp
save
script
scripting
see
share
shell
should
shown
silently
similarly
simple
since
single
so
software
some
sort
sorted
sorting
space
spaces
special
spell
spelling
standard
start
steve
strict
subdirectories
submit
substitutions
such
supports
suppose
sure
symbolic
system
systematic
systematically
tables
tag
take
takes
test
text
than
that
the
their
them
then
there
these
they
thing
this
title
to
tr
traditional
transcript
treat
true
two
typed
u
under
unique
upper
use
user
using
utilities
v
var
w
want
we
web
were
what
where
which
whose
why
with
word
words
work
working
worry
write
x
y
you
your
you're
za


